■ 開発
　ウォーターフォール開発・・・工程を1つずつ順番に終わらせていき、（基本的には）工程の後戻りをしない開発方式
　アジャイル開発・・・作る→見てもらう→作り直す……のように柔軟に進めましょうよ、なやり方
　マイグレーション・・・古いやつに入っているデータとかプログラムとかを新しいやつに移すこと
　デグレーション・・・直したはずのバグ（プログラムのおかしいところ）が復活していたり、前はなかったはずのバグがあったり、実装したはずの機能がなくなっている状態のこと
　デプロイ・・・作ったプログラムをしかるべき場所に置いたり、あれやこれやの設定をしたりして、使える状態にすること
　コンフリクト・・・複数のプログラムが同じデータとかファイルを同じタイミングで使おうとして「俺が使うんだー」「いーや、私が使うのよー」になっている状態のこと
　環境
　　開発環境（ローカル）・・・開発するときの作業場所
　　検証環境（ステージング）・・・
　　本番環境・・・できあがったシステムやサービスが実際に動く環境（コンピュータとか中に入っているソフトとか）のこと
　設計書／仕様書
　　要件定義・・・お客様の「こんなものが欲しいんだよねー」をまとめる工程のこと
　　基本設計書・・・お客さまの「こんなものが欲しいんだよねー」を受けて考えた「それじゃあ、こんなシステムを作りましょう」な全体像や概要をまとめた資料のこと
　　詳細設計書・・・システムの詳細をまとめた資料で、実際のプログラムを作るときに見る資料のこと
　テスト
　　単体テスト（UT）・・・「合体前の部品は、それぞれちゃんと動く？」を確認するテストのこと
　　結合テスト（CT／IT）・・・「合体して、ちゃんと動く？」を確認するテストのこと
　　総合テスト（ST）・・・「このシステムは、ばっちり、きっちり、完成したかな？ちゃんと動いてお客さまの役に立てるかな？」を全体的に確認するテストのこと
　エビデンス／証跡・・・「ちゃんとテストしたよ！ウソじゃないよ！」の証拠となるであろう画面のハードコピー（画面の表示内容を保存したもの）やログ（何らかの記録）などのこと
　データパッチ・・・ソフトに変更を加えるために用意された、後付けのプログラムのこと
　Access・・・ちょっかいを出しに行くこと
　マクロ・・・事前に操作手順などを記録しておいて、その記録した内容をまとめて実行できるようにする機能のこと
　　VBA・・・マイクロソフトが開発した、Microsoft Office製品で動くプログラムを作るためのプログラミング言語
　GAS（Google Apps Script）・・・googleドライブ・スプレッドシート・Gmail・Googleフォームなどの総称
　API・・・その機能と関係ないプログラムとかからその機能を利用できるように用意されている、その機能との窓口部分（に関する決まり事）のこと
　　WEB API・・・インターネットの線を経由してやり取りする、その機能との窓口部分（に関する決まり事）のこと
　　REST API・・・Webシステムを外部から利用するためのプログラムの呼び出し規約(API)の種類の一つで、RESTと呼ばれる設計原則に従って策定されたもの
　　SOAP・・・異なるコンピュータ上で動作するプログラム同士がネットワークを通じてメッセージを伝え合い、連携して動作するための通信プロトコル（規約）の一つ。
　Ajax・・・「JavaScriptを使って非同期通信してあれこれ」をふんわりと表現したもの
　　XML・・・マークアップ言語（タグで囲むことで構造を表現する言語）のひとつ
　　JSON・・・JavaScriptと相性が良い、ファイルの書き方ルール
　　ステータスコード・・・HTTPリクエストの結果を表す3桁の数字。
　　クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）・・・
　バリデーション・・・入力内容や記述内容が要件を満たしているか、妥当性を確認すること
　データ連携
　　Daemon・・・メモリ上で「さぁ、いつでもかかってこい」と待機している常駐プログラムのUNIX系OSにおける呼び名
　　CRON・・・事前に「いついつになったら、このプログラムを動かしてね」と指示を出しておくと、その時間になったときに指定しておいたプログラムを動かしてくれるやつ
　　バッチ・・・「まとめてやりましょ処理」のこと
　　ログ・・・コンピュータの世界における、やったことや起こったことの「記録」
　　CSV・・・項目間が「,（カンマ）」で区切られている書式（CSV形式）のこと。
　　TSV・・・項目間が「タブ」で区切られている書式のこと（TSV形式）。
　プルリクエスト（マージリクエスト）・・・コードの変更をレビュワーに通知し、マージを依頼する機能です。
■ チケット管理ツール
　asana・・・Asanaは白と黒を基調とした見やすいUIが特徴的なチケット管理ツール
　Backlog・・・今後やる予定の作業や開発する予定のシステムのこと
　Jooto・・・タスク・プロジェクト管理ツール
　Readmine・・・webベースのプロジェクト管理ソフトウェア
　Trello・・・ボード、リスト、カードを使用したプロジェクト管理ツール
■ バージョン管理
　集中型・・・ある1つのサーバで中央集中型システムは稼働し，だれでもそのサーバからファイルのコピーを取得して作業ができます
　分散型・・・分散型システムは中央集中型と違って，主となるサーバは持っていません
　Github・・・分散型バージョン管理システム
　Backlog・・・今後やる予定の作業や開発する予定のシステムのこと
　SourceTree・・・Gitの操作ができる無料のデスクトップアプリケーション
　Tortoise SVN・・・バージョン管理システムの一つ
　Git Flow・・・git-flowとは、プラグイン(ツール)のこと
　　master・・・プロダクトとしてリリースするためのブランチ
　　release・・・プロダクトリリースの準備。 機能の追加やマイナーなバグフィックスとは独立させることで、 リリース時に含めるコードを綺麗な状態に保つことができる
　　develop・・・開発ブランチ。コードが安定し、リリース準備ができたら master へマージする。
　　feature・・・機能の追加。 develop から分岐し、 develop にマージする。
■ FW／ライブラリ
　FW
　　Spring Framework・・・Javaプラットフォーム向けのオープンソースアプリケーションフレームワークである。
　　Struts・・・Java Servlet APIを拡張してMVC (Model、View、Controller)アーキテクチャを採用した、オープン・ソースのフレームワークです
　　JSF（Java Server Faces）・・・JavaベースのWebアプリケーションフレームワークである。 Javaの拡張機能セットであるJava Platform, Enterprise Edition (Java EE) の仕様の一つに採用されている。
　ライブラリ
　　Bootstrap・・・ウェブサイトやWebアプリケーションを作成するフロントエンドWebアプリケーションフレームワークである。
　　Flyway・・・FlywayはJVM上で動作するデータベースのマイグレーションツールです。
　　Jackson・・・・JSONをJavaオブジェクトに変換できる且つJavaオブジェクトをJSONに変換できるライブラリ。
　　jQuery・・・JavaScriptの書き方などを簡単にすることが出来る、JavaScriptで作成されたライブラリなんだ。
　　Junit・・・Javaで開発されたプログラムにおいてユニットテスト（単体テスト）の自動化を行うためのフレームワークである。
　　Log4j・・・主にデバッグ用ツール
　　Lombok・・・アノテーションを付けるだけで、 getter, setter, toString, equals などの「何度も繰り返し書くコード」をコンパイル時に自動生成してくれるようになる。
　　ORM・・・データベースとオブジェクト指向プログラミング言語の間の非互換なデータを変換するプログラミング技法である。
■ 連絡ツール
　ChatWork・・・Chatworkは仕事で必要なコミュニケーションをより効率的にするビジネスチャットツールです。
　Slack・・・Slack とはよりシームレスなチームワークを実現するビジネスコラボレーションハブです。
　IP Messenger・・・LAN 用メッセンジャーソフトです。
■ Java
　Javadoc・・・ソースコードの内容から自動判定したり特定の書式で書かれたコメントを抜き出すことによって自動作成された、ホームページっぽい形式になっているJavaのソースコードの説明書。
　アノテーション・・・アノテーションは「注釈」を意味する言葉で、Javaを書くときに大切な情報をコメントできるものです。
　メモリ管理
　　ヒープ・・・アプリケーションやOSで動的に割り当てたり解放するものなんだ。プログラムで一時的に必要になるメモリで、例えばファイルを読み出すときに読みだしたファイル内容を置いておいたり、ネットワークでデータを送受信する時にデータを置いておく時に使うよ。
　　GC・・・コンピュータプログラムが動的に確保したメモリ領域のうち、不要になった領域を自動的に解放する機能である
　　GoF・・・そのような達人たちが同じ問題に取り組んだ場合、典型的にはみな同じパターンの解決策に辿り着く。これがデザインパターンである
　デザインパターン
■ その他
　オブジェクト指向・・・「モノ（どんな奴でどう動く）」に注目した考え方のこと
　バッチ処理・・・「まとめてやりましょ処理」のこと
　コンパイル・・・人間が分かる言葉で書いたプログラムの元ネタ（ソースコード）の中身をコンピュータさんが分かる言葉に翻訳すること
　カバレッジ・・・「あーこいつはね。全体に対して、これくらいをカバーしているよ（カバーしたよ）」的なことをカッコつけていった表現
　プラットフォーム・・・そいつを動かすための土台となる環境のこと